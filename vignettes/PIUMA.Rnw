%\VignetteIndexEntry{Phenotypes Identification Using Mapper from topological data Analysis}
%\VignettePackage{PIUMA}
%\VignetteEngine{knitr::knitr}

% To compile this document
% library(tools)
% library(BiocStyle)
% library(devtools)
% library(knitr)
% setwd("./vignettes/")

% put the custom Biconductor.sty in vignette folder and then launch
% unlink(c("cache","figure","*.bst","*.R","*.tex","*.log","*.aux","*.out","PIUMA.pdf","*.toc","*.blg","*.bbl"),recursive = T); Rcmd("Sweave --engine=knitr::knitr --pdf PIUMA.Rnw")



% don't use it for PIUMA!!!
% unlink(c("cache","figure","*.bst","*.sty","*.R","*.tex","*.log","*.aux","*.out","PIUMA.pdf","*.toc","*.blg","*.bbl"),recursive = T); Rcmd("Sweave --engine=knitr::knitr --pdf PIUMA.Rnw")



% devtools::build_vignettes()
% tools::compactPDF("../inst/doc/PIUMA.pdf",gs_quality = "ebook")

\documentclass{article}

<<style-knitr, eval=TRUE, echo=FALSE, results="asis">>=
BiocStyle::latex(relative.path = TRUE)
@

\usepackage[utf8]{inputenc}

\usepackage{subfig}% for combining multiple plots in one figure
\usepackage[section]{placeins}
\usepackage{amsmath}

\newcommand{\piuma}{\textit{PIUMA }}

<<knitr, echo=FALSE, results="hide">>=
library("knitr")
opts_chunk$set(
  tidy=FALSE,
  dev="png",
  fig.show="hide",
  #  fig.width=4, fig.height=4.5,
  fig.width=10, fig.height=8,
  fig.pos="tbh",
  cache=TRUE,
  message=FALSE)
@


\author[1]{Mattia Chiesa}
\author[1,2]{Laura Ballarini}
\author[2]{Alessia Gerbasi}
\author[2]{Giuseppe Albi}
\author[2]{Arianna Dagliati}
\author[1]{Luca Piacentini}

\affil[1]{Bioinformatics and Aritificial Intelligence facility, Centro Cardiologico Monzino, IRCCS, Milan, Italy}
\affil[2]{Dipartimento di Ingegneria Industrale e dell'Informazione, Universita' degli studi di Pavia, Pavia, Italy}



\bioctitle{The PIUMA package - Phenotypes Identification Using Mapper from topological data Analysis}

\begin{document}

\maketitle

\begin{figure}[!htbp]
\includegraphics{Logo}
%\caption{
%The \piuma Logo.
%}
\label{Logo}
\end{figure}
\FloatBarrier


\begin{abstract}
We present \piuma, a package for implementing custom and robust Topological Data Analyses (TDA), to identify and characterize communities of samples in high and heterogeneous dimensional data.

\end{abstract}

\packageVersion{\Sexpr{BiocStyle::pkg_ver("PIUMA")}}


\newpage

\tableofcontents

\newpage

\section{Topological Data Analysis for Phenotyping} \label{intro}
Phenotyping is a process of characterizing and classifying individuals based on observable traits or phenotypic characteristics. In the context of medicine and biology, phenotyping involves the systematic analysis and measurement of various physical, physiological, and behavioral features of individuals, such as height, weight, blood pressure, biochemical markers, imaging data, and more. Phenotyping plays a crucial role in precision medicine as it provides essential data for understanding individual health characteristics and disease manifestations, by combining data from different sources to gain comprehensive insights into an individual's health status and disease risk. This integrated approach allows for more accurate disease diagnosis, prognosis, and treatment selection.  The same considerations could be also be extended in omics research, in which the expression values of thousands of genes and proteins, or the incidence of somatic and germline are usually assessed to link molecular activities with the onset or the progression of diseases. In this field, phenotyping are needed to identify patterns and associations between phenotypic traits and a huge amount of available features. These analyses can uncover novel disease subtypes, identify predictive markers, and facilitate the development of personalized treatment strategies.\\
In this context, the application of unsupervised learning methodologies could help the identification of specific phenotypes in huge heterogeneous cohorts, such as clinical or -omics data. Among them, the Topological Data Analysis (TDA) is a rapidly growing field that combines concepts from algebraic topology and computational geometry to analyze and extract meaningful information from complex and high-dimensional data sets \cite{carlsson2009topology}. Moreover, TDA is a robust and effective methodology, able to preserve the intrinsic characteristics of data and the mutual relations among observations, depicting complex data in a graph-based representation. Indeed, building topological models as networks, TDA allows complex diseases to be inspected in a continuous space, where subjects can ‘fluctuate’ over the graph, sharing, at the same time, more than one adjacent node of the network\cite{dagliati2020using}.\\
Overall, TDA offers a powerful set of tools to capture the underlying topological features of data, revealing essential patterns and relationships that might be hidden from traditional statistical techniques\cite{casaclang2019network}.

\subsection{The PIUMA package} \label{piuma_pack}

The \piuma \footnote{PIUMA is the italian word meaning 'feather'}(\underline{\textbf{P}}henotypes \underline{\textbf{I}}dentification \underline{\textbf{U}}sing \underline{\textbf{M}}apper from topological data \underline{\textbf{A}}nalysis) package allows implementing all the main steps of a Topological Data Analysis from tab-delimited TXT files or \Robject{data.frame}.



PIUMA is available by Github:

<<chu_1, eval=FALSE>>=
install.packages("devtools")
devtools::install_github("BioinfoMonzino/PIUMA")
@

% or by Bioconductor:
% <<chu_2, eval=FALSE>>=
% install.packages("BiocManager")
% BiocManager::install("PIUMA")
% @

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Tutorial} \label{tutor_chp2}
\subsection{The testing dataset} \label{dataset}
We tested \piuma on a subset of the single-cell RNA Sequencing dataset (\href{https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE193346}{GSE: GSE193346}) generated and published by \emph{Feng et al.} (2022) on Nature Communication to demonstrate that distinct transcriptional profiles are present in specific cell types of each heart chambers, which were attributed to have roles in cardiac development \cite{feng2022single}.
In this tutorial, our aim will be to exploit \piuma for identifying sub-population of vascular endothelial cells, which can be associated with specific heart developmental stages.
The original dataset consisted of three layers of heterogeneity: cell type, stage and zone (\emph{i.e.,} heart chamber). Our testing dataset was obtained by subsetting vascular endothelial cells (cell type) by \Biocpkg{Seurat} object, extracting raw counts and metadata. Thus, we filtered low expressed genes and normalized data by \Biocpkg{DaMiRseq} :
<<chu_3, eval=FALSE>>=
#############################################
############# NOT TO EXECUTE ################
########## please skip this chunk ###########
#############################################


dataset_seu <- readRDS("./GSE193346_CD1_seurat_object.rds")

# subset vascular endothelial cells
vascularEC_seuobj <- subset(x = dataset_seu,
                            subset = markFinal == "vascular_ec")
df_data_counts <- vascularEC_seuobj@assays$RNA@counts
df_cl <- as.data.frame(df_data_counts)
meta_cl <- vascularEC_seuobj@meta.data[, c(10,13,14,15)]
meta_cl[sapply(meta_cl, is.character)] <- lapply(meta_cl[sapply(meta_cl,
                                                                is.character)],
                                                 as.factor)

## Filtering and normalization
colnames(meta_cl)[4] <- "class"
SE <- DaMiR.makeSE(df_cl, meta_cl)
data_norm <- DaMiR.normalization(SE,
                                 type = "vst",
                                 minCounts = 3,
                                 fSample = 0.4,
                                 hyper = "no")
vascEC_norm <- round(t(assay(data_norm)), 2)
vascEC_meta <- meta_cl[, c(3,4), drop=FALSE]

@

At the end, the dataset was composed of 1180 cells (observations) and 838 expressed genes (features). Moreover, 2 additional features are present in the metadata: 'stage' and 'zone'. The first one describes the stage of heart development, while the second one refers to the heart chamber.
Users can directly import the testing dataset by:

<<chu_5, dev="pdf">>=
library(PIUMA)
library(ggplot2)
data(vascEC_norm)
data(vascEC_meta)

df_TDA <- cbind(vascEC_meta, vascEC_norm)

dim(df_TDA)
head(df_TDA[1:5, 1:7])
@

\subsection{Preparing data for Mapper} \label{prepareMapper}
To perform TDA, the outcome variable(s) must be previously selected and separated from the original dataset. Moreover, some preliminary preprocessing steps have to be implemented on the remaining data; specifically, all the features have to be scaled on a 0-1 range; then, the dataset can be represented in a low-dimensional space and transformed in a distance matrix.
The \Rfunction{importSplitScale} function allows selecting one or more variables of a \Robject{data.frame} to be considered as outcome and performing the 0-1 scaling on the remaining dataset:

<<chu_6, dev="pdf">>=
res <- importSplitScale(df_TDA, c("stage","zone"))
@

The object \Robject{res} is a \Robject{list} containing 4 slots:

\begin{itemize}
  \item{\textbf{data\_real}: a \Robject{data.frame} with original data \textbf{without} outcomes;}
  \item{\textbf{data\_scaled01}: a \Robject{data.frame} with scaled data \textbf{without} outcomes;}
  \item{\textbf{outcomeFact}: a \Robject{data.frame} with original outcomes;}
  \item{\textbf{outcome}: a \Robject{data.frame} with original outcomes converted as \Rcode{integer}, starting from 0}
\end{itemize}

Then, the scaled data stored in \Robject{data\_scaled01}, called \emph{'point-cloud'} in TDA jargon, can be projected in a low dimensional space and transformed in distance matrix, exploiting the \Rfunction{dfToProjection} and \Rfunction{dfToDistance} functions, respectively.
In this example, we will use the 'umap' as projection strategy, to obtain the first 2 reduced dimensions (\Rcode{nComp = 2}) and the Euclidean distance (\Rcode{distMethod = "euclidean"}) as distance metrics. \piuma allows setting 6 different projection strategies with their specific arguments: \Rcode{UMAP}, \Rcode{TSNE}, \Rcode{PCA}, \Rcode{MDS}, \Rcode{KPCA}, and \Rcode{ISOMAP} and 3 types of well-known distance metrics are available: Euclidean, Pearson's correlation and the Gower's distance (to be preferred in case of categorical features are present). Users can also use standard external functions both to implement the low-dimensional reduction  (\textit{e.g.,} the built-in \Rfunction{princomp} function) and to calculate distances (\textit{e.g.,} the built-in \Rfunction{dist} function).

<<chu_7, dev="pdf">>=
set.seed(1)
cmp <- dfToProjection(res$data_scaled01,
                      "UMAP",
                      nComp=2,
                      umapNNeigh = 25,
                      umapMinDist = 0.3,
                      showPlot = FALSE)

# plot point-cloud based on stage and zone
df_plot <- as.data.frame(cbind(res$outcomeFact, cmp), stringAsFactor=TRUE)
ggplot(data= df_plot, aes(x=comp1, y=comp2, color=stage))+
  geom_point(size=3)+
  facet_wrap(~zone)


# calculate the distance matrix
df_dist <- dfToDistance(res$data_scaled01, distMethod = "euclidean")
@

\begin{figure}[!htbp]
\includegraphics{figure/chu_7-1}
\caption{\textbf{Scatterplot from UMAP.} Four scatter plots are drawn, using the first 2 components identified by UMAP. Each panel represents cells belonging to a specific heart chamber, while colors refer to the development stage.}
\label{figumap}
\end{figure}
\FloatBarrier
As shown in Figure~\ref{figumap}, the most of vascular endothelial cells are located in ventricles where, in turn, it is possible to more easily appreciate cell groups based on developmental stages.

\subsection{TDA Mapper} \label{TDAMapper}
One of the core algorithms in TDA is the TDA \textbf{Mapper}, which is designed to provide a simplified representation of the data's topological structure, making it easier to interpret and analyze. The fundamental idea behind TDA Mapper is to divide the data into overlapping subsets called 'clusters' and, then, build a simplicial complex that captures the relationships between these clusters. This simplicial complex can be thought of as a network of points, edges, triangles, and higher-dimensional shapes that approximate the underlying topology of the data.
The TDA Mapper algorithm proceeds through several consecutive steps:
\begin{itemize}
  \item{\textbf{Data Partitioning}: the data is partitioned into overlapping subsets, called \textbf{'bins'}, where each bin corresponds to a neighborhood of points;}
  \item{\textbf{Lensing}: a filter function, called \textbf{'lens'}, is chosen to assign a value to each data point;}
  \item{\textbf{Clustering}: the overlapping bins are clustered based on the values assigned by the filter function. Clusters are formed by grouping together data points with similar filter function values;}
  \item{\textbf{Simplicial Complex}: a simplicial complex is constructed to represent the relationships between the clusters. Each cluster corresponds to a vertex in the complex, and edges are created to connect overlapping clusters;}
  \item{\textbf{Visualization}: the resulting simplicial complex can be visualized, and the topological features of interest can be easily identified and studied.}
\end{itemize}

TDA Mapper has been successfully applied to various domains, including biology, neuroscience, materials science, and more. Its ability to capture the underlying topological structure of data while being robust to noise and dimensionality makes it a valuable tool for gaining insights from complex datasets. \piuma is thought to implement a 2-dimensional lens function and then apply one of the 4 well-known clustering algorithm: 'k-means', 'hierarchical clustering', DBSCAN or OPTICS.
<<chu_8, dev="pdf">>=
set.seed(1)
dfMapper <- mapperCore(dfDistances = df_dist,
                       df2Dlens = cmp,
                       nBins = 15,
                       overlap = 0.3,
                       clustMeth="kmeans")

# number of clusters (nodes)
dim(dfMapper)

# content of two overlapping clusters
dfMapper["node_102_cl_1", 1]
dfMapper["node_117_cl_1", 1]


@
The argument \Robject{df2Dlens} will expect a 2 columns \Robject{data.frame} as \piuma applies a 2 dimensional lens function to the dataset. Here, we decided to generated \textbf{15 bins} (for each dimension), each one overlapping by \textbf{30\%} with the adjacent ones. The \textbf{k-means} algorithm is, then, applied on the sample belonging to each 'squared' bin.
In this example,the Mapper aggregated samples in 369 partially overlapping clusters. Indeed, as shown in the previous code chunk, the nodes 'node\_102\_cl\_1' and 'node\_117\_cl\_1' shared 2 out of 4 cells.

\subsection{Nodes Similarity and Enrichment} \label{NodeEnrich}
The output of mapper \Robject{data.frame} in which each rows represent a cluster of samples (here, a cluster of cells), called \textbf{'node'} in network theory jargon. \piuma allows the users to also generate a matrix that specifies the similarity between nodes (\textbf{'edge'}) allowing to represent the data as a network. Since the similarity, in this context, consists of the number of samples, shared by nodes, \piuma implements a function (\Rfunction{jaccardMatrix}) to calculate the Jaccard's index between each pairs of nodes.

<<chu_10, dev="pdf">>=
# Jaccard Matrix
jacc <- jaccardMatrix(dfMapper)
head(round(jacc[1:5,1:5],3))
round(jacc["node_102_cl_1","node_117_cl_1"],3)
@

Regarding the similarity matrix, we obtained a Jaccard matrix where each clusters' pair was compared; looking, for example, at the Jaccard Index for nodes 'node\_102\_cl\_1', 'node\_117\_cl\_1' we correctly got 0.5 (2/4 cells).
Moreover, the \Rfunction{tdaDfEnrichment} allows inferring the features values for the generated nodes, by returning the averaged variables values of samples belonging to specific nodes. Generally, this step is called 'Node Enrichment'. In addition the size of each node is also appended to the output \Robject{data.frame} (the last column name is 'size').

<<chu_11, dev="pdf">>=
# Node enrichment
outcome <- res$outcome[,"zone"]
enrich_node <- tdaDfEnrichment(dfMapper, cbind(res$data_scaled01,outcome))
head(enrich_node[1:5, tail(names(enrich_node), 5)])
@

Printing the last 5 columns of the \Robject{data.frame} returned by \Rfunction{tdaDfEnrichment}, we can show the averaged expression values of each nodes for 4 mitochondrial genes as well as the number of samples belonging to the nodes.

\subsection{Network assessment} \label{NetAssess}
TDA requires several parameters to be set, such as the type of projection algorithm, the distance metrics, the number of overlapping bins, the percentage of overlap, and the clustering techniques. Moreover, often,  of specific algorithm parameters need to be chosen, such as the number of UMAP neighbors. This means that TDA analysis should be repeated several times, varying the hyperparameters to find the suitable combination ('grid search' approach) and an evaluation metrics is needed to assess each result.
\piuma implements two different strategies to assess TDA results:

\begin{itemize}
  \item{ A \textbf{supervised approach}, usually called \textbf{'anchoring'}, in which the entropy of the network generated by TDA is calculated averaging the entropies of each node using one single outcome as class (\emph{i.e.,} 'anchor'). The lower the entropy, the better the network.}
  \item{ \textbf{An unsupervised approach} that exploits a topological measurement to force the network to be scale-free. Scale-free networks are characterized by few highly connected nodes (hub nodes) and many poorly connected nodes (leaf nodes). Scale-free networks follows a power-law degree distribution in which the probability that a node has k links follows $P(k) \sim  k^{-\gamma}$, where $k$ is a node degree (\emph{i.e.,}, the number of its connections), $ \gamma $ is a degree exponent, and $P(k)$ is the frequency of nodes with a specific degree.
Degree exponents between $ 2 < \gamma < 3 $, have been observed in most biological and social networks. Forcing our network to be scale-free ensures to unveil communities in our data.
The higher the correlation between P(k) and k, in log-log scale, the better the network.
}
 \end{itemize}

The second approach is preferable because no prior knowledge (\emph{i.e.,}, outcome) is needed to assess the network.

<<chu_12, dev="pdf">>=
# Anchoring (supervised)
entropy <-  checkNetEntropy(enrich_node$outcome)
entropy

# Scale free network (unsupervised)
netModel <- checkScaleFreeModel(jacc, showPlot = "yes")
netModel
@
In this example, we tested both the approaches even if the unsupervised one is preferable as no prior knowledge (i.e., outcome) is needed to assess the network. We got a global entropy of 0.82 and correlations between P(k) and k equal to -0.78 and -0.62, with data in linear scale or log-log scale (Figure~\ref{figuscalefree}), respectively. \piuma provides users also with the $ \gamma $ value, so that it is easy to assess if the network is scale-free ($ 2 < \gamma < 3 $) or not. In this case, $ \gamma$ is equal to 2.10, meaning that the network can be considered scale-free.
Overall, the entropy, the correlation between P(k) and k (linear or log-log scale), and/or the $\gamma$ value, provided by \Rfunction{checkNetEntropy} and \Rfunction{checkScaleFreeModel}, could be used to compare different sets of hyper-parameters, such as different lenses, space reduction algorithms and Mapper arguments.

\begin{figure}[!htbp]
\includegraphics{figure/chu_12-1}
\caption{\textbf{Power-law degree distribution.} The correlation between P(k) (y-axis) and k (x-axis) is represented in linear scale (on the left) and in log-log scale (on the right). The regression line (orange line) is also provided.}
\label{figuscalefree}
\end{figure}
\FloatBarrier


\subsection{Export data for Cytoscape} \label{NetAssess}
Cytoscape is a well-known tool to handle, process and analyze networks \cite{shannon2003cytoscape}. Two files are needed to generate and enrich network in cytoscape: the jaccard Matrix (\Robject{jacc}), to generate the structure of the network (nodes and edges) and a \Robject{data.frame} with additional nodes information to enrich the network (\Robject{enrich\_node}):
<<chu_13, eval=FALSE>>=

write.table(x = round(jacc,3),
            file = "./jaccard.matrix.txt",
            sep = "\t",
            quote = FALSE,
            na = "",
            col.names = NA)

write.table(x = enrich_node,
            file = "./nodeEnrichment.txt",
            sep = "\t",
            quote = FALSE,
            col.names = NA)
@

To explore the network resulted following the \piuma framework, we imported 'jaccard.matrix.txt' in Cytoscape by the aMatReader plugin \cite{settle2018amatreader} (PlugIn -> aMatReader -> Import Matrix file) while 'nodeEnrichment.txt' by File -> Import -> Table from File. Then, we identified network communities by the GLay cluster function from the 'clustermaker2' plugin \cite{utriainen2023clustermaker2}.

\begin{figure}[!htbp]
\includegraphics{CytoscapeOutput}
\caption{
The network representation where each node is colored by the developmental stages (top-left), the 11 communities identified by clustermaker2 (top-right), and the gene expression levels of two genes: Aprt (bottom-left) and Igfbp7 (bottom-right)
}
\label{CytoscapeOutput}
\end{figure}
\FloatBarrier

As shown in Figure~\ref{CytoscapeOutput}, using the transcriptome of vascular endothelial cells, it is possible to identify 11 communities of cells (top-right). Interestingly, some of them are in the same developmental stage (top-left). Moreover, there are clusters showing similar expression for some genes but different expression for other genes, suggesting that the sub-population could have a different biological function.For example, orange and yellow clusters have a similar average expression of Igfpb7 (bottom-right) but different expression level of Aprt (bottom-left).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Session Info}
<<sessInfo, results="asis", echo=FALSE>>=
toLatex(sessionInfo())
@

\bibliography{library}

\end{document}





